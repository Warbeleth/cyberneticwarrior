//////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	File : CBase.h
//
//	Author : Patrick Alvarez 
//
//	Purpose : Parent base class declarations for all In-Game objects.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CBASE_H_
#define CBASE_H_

#include <d3d9.h>
#include "IBaseInterface.h"
#include "SGD Wrappers/SGD_Math.h"
#include <vector>
using std::vector;

enum{OBJ_BASE, OBJ_PLAYER, OBJ_GRAPPLING_HOOK, OBJ_ROCKET, OBJ_BLOCK, OBJ_PICKUP, OBJ_ENEMY};

class CBase: public IBaseInterface
{
private:

	struct Rect
	{
		float fPosX;
		float fPosY;
		int nWidth;
		int nHeight;
	} m_rBaseRect;

	tVector2D m_vBaseVelocity;
	tVector2D m_vSpeed;
	tVector2D m_vWorldPos;


	int m_nImageID;

	int m_nType;

	unsigned int m_uiRefCount;


public:

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : CBase (default Constructor)
	//
	//	Purpose : To initialize all of CBase's data class members.
	////////////////////////////////////////////////////////////////////////////////////
	CBase(void);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : CBase (Constructor)
	//
	//	Purpose : To initialize all of CBase's data class members.
	////////////////////////////////////////////////////////////////////////////////////
	CBase(int nType, float fPosX, float fPosY,
		int nWidth, int nHeight, float fVelX, float fVelY);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : ~CBase (Destructor)
	//
	//	Purpose : To delete all of CBase's allocated memory, 
	//			  NULLing out specific pointers and 
	//			  shutting down any necessary functionaly.
	////////////////////////////////////////////////////////////////////////////////////
	~CBase(void);

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : Update
	//
	//	Purpose : To update CBase functionality.
	////////////////////////////////////////////////////////////////////////////////////
	virtual void Update(float fElapsedTime);

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : Render
	//
	//	Purpose : To Render CBase Objects to the Screen.
	////////////////////////////////////////////////////////////////////////////////////
	virtual void Render(void);
	
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : AddRef
	//
	//	Purpose : To Add Reference which is used for Object Manager.
	////////////////////////////////////////////////////////////////////////////////////
	void AddRef(void);

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : Release
	//
	//	Purpose : To release a reference from the object manager.
	////////////////////////////////////////////////////////////////////////////////////
	void Release(void);

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : CheckCollision
	//
	//	Purpose : To check for collision agaisnt passed in based object 
	//			  and return whether if collided to the invoking object.
	////////////////////////////////////////////////////////////////////////////////////
	virtual bool CheckCollision(CBase* pBase);



	////////////////////////////////////////////////////////////////////////////////////
	// Accessors
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetCollisionRect
	//
	//	Purpose : Accessor that returns CBase object's collision RECT.
	////////////////////////////////////////////////////////////////////////////////////
	virtual RECT GetRect(void);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetImageID
	//
	//	Purpose : Accessor that returns CBase object's ImageID.
	////////////////////////////////////////////////////////////////////////////////////
	int GetImageID(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetType
	//
	//	Purpose : Accessor that returns the CBase object's Type.
	////////////////////////////////////////////////////////////////////////////////////
	int GetType(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetWidth
	//
	//	Purpose : Accessor that returns the CBase object's Width.
	////////////////////////////////////////////////////////////////////////////////////
	int GetWidth(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetHeight
	//
	//	Purpose : Accessor that returns the CBase object's Heigh.
	////////////////////////////////////////////////////////////////////////////////////
	int GetHeight(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetPosX
	//
	//	Purpose : Accessor that returns the CBase object's X Position.
	////////////////////////////////////////////////////////////////////////////////////
	float GetPosX(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetPosY
	//
	//	Purpose : Accessor that returns the CBase object's Y Position.
	////////////////////////////////////////////////////////////////////////////////////
	float GetPosY(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetBaseVelX
	//
	//	Purpose : Accessor that returns the CBase object's Base X Velocity.
	////////////////////////////////////////////////////////////////////////////////////
	float GetBaseVelX(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetBaseVelY
	//
	//	Purpose : Accessor that returns the CBase object's Base Y Velocity
	////////////////////////////////////////////////////////////////////////////////////
	float GetBaseVelY(void) const;
	

	tVector2D	GetWorldPos(void)const;
	void		SetWorldPos(tVector2D vWorldPos);
	
	
	////////////////////////////////////////////////////////////////////////////////////
	// Mutators
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetImageID
	//
	//	Purpose : Mutator that sets the CBase object's ImageID based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetImageID(int nImageID);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetType
	//
	//	Purpose : Mutator that sets the CBase object's Type based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetType(int nType);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetPosX
	//
	//	Purpose : Mutator that sets the CBase object's X Position 
	//			  based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetPosX(float fPosX);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetPosY
	//
	//	Purpose : Mutator that sets the CBase object's Y Position 
	//			  based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetPosY(float fPosY);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetWidth
	//
	//	Purpose : Mutator that sets the CBase object's Width based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetWidth(int nWidth);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetHeight
	//
	//	Purpose : Mutator that sets the CBase object's Height based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetHeight(int nHeight);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetBaseVelX
	//
	//	Purpose : Mutator that sets the CBase object's Base X Velocity 
	//			  based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetBaseVelX(float nVelX);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetBaseVelY
	//
	//	Purpose : Mutator that sets the CBase object's Base Y Velocity
	//			  based on sent parameter.
	////////////////////////////////////////////////////////////////////////////////////
	void SetBaseVelY(float nVelY);
	


	/////////////////////////////////////
	// temp
	/////////////////////////////////////

	void SetCamX(float fCamX);
	void SetCamY(float fCamY);

	float GetCamX(void);
	float GetCamY(void);
	
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetSpeedY
	//
	//	Purpose : Mutator that sets m_vSpeed.fY to the recieved parameter
	////////////////////////////////////////////////////////////////////////////////////
	void SetSpeedY(float nSpeedY);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetSpeedX
	//
	//	Purpose : Mutator that sets m_vSpeed.fX to the recieved parameter
	////////////////////////////////////////////////////////////////////////////////////
	void SetSpeedX(float nSpeedX);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : SetOnGround
	//
	//	Purpose : Mutator that sets m_bOnGround to the recieved parameter
	////////////////////////////////////////////////////////////////////////////////////
	void SetOnGround(bool bOnGround);
	/////////////////////////////////////
};
#endif