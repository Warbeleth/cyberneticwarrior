//////////////////////////////////////////////////////////////////////////////////////////////////////
// File: “CWinState.h”
//
// Author: Anthony Muccio(AM)
//
// Purpose: This header holds the CWinState class. This class' purpose is to render an in
//			game winning condition screen.
//////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CWINSTATE_H_
#define _CWINSTATE_H_

#include "IGameState.h"
#include "CFont.h"

class CSGD_Direct3D;
class CSGD_DirectInput;
class CSGD_TextureManager;
class CSGD_WaveManager;
class CSGD_DirectSound;
class CEvent;

//////////////////////////////////////////////////////////////////////////////////////////////////////
//				 ******************* CLASS - CWinState *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CWinState : public IGameState
{
private:
	enum options{CONTINUE = 0, EXIT};
	// Font
	CFont	m_WinStateFont;
		
	int		m_nScrollingID;
	float	m_fElapsedTime;
	// Texture IDs
	int	m_nBackgroundID;
	int m_nBGMusic;

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CWinState”
	//
	// Purpose: The default constructor for CWinState. Will initialize values.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CWinState(void);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “~CWinState”
	//
	// Purpose: The destructor for CWinState. Will cleanup.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	~CWinState(void);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CWinState”
	//
	// Purpose: The copy constructor for CWinState.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CWinState(const CWinState&);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CWinState& operator=”
	//
	// Purpose: The assignment operator for CWinState.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CWinState& operator=(const CWinState&);

	static CWinState* sm_pWinStateInstance;
public:
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Enter”
	//
	// Purpose: Enter essentially does what the default constructor will do, however it doesn't "need" to
	//			initialize all values. Enter only has to initialize the values that reset everytime the
	//			user enters this state.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void	Enter(void);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Input”
	//
	// Purpose: Reads the current input of the user and performs actions based on whether what was input
	//			was being looked for or not.
	//			RETURN - true for this state, at all times
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	bool	Input(void);
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: Update takes care of any increment over time variables as well as anything that constantly
	//			needs to be recalculated.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void	Update(float fElapsedTime);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: Draws to the screen.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void	Render(void);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Exit”
	//
	// Purpose: Cleans up any pointers or memory as the state exits.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void	Exit(void);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “GetInstance”
	//
	// Purpose: Will return a pointer to the instance of this state and will also initialize the state if
	//			it has not already been initialized.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	static CWinState*	GetInstance(void);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “DeleteInstance”
	//
	// Purpose: Will remove the instance of the state from memory.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	static void DeleteInstance(void);
};
#endif