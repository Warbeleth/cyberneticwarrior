//////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	File : CCamera.cpp
//
//	Author : Patrick Alvarez 
//
//	Purpose : Camera class used to update world position for player and game objects.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
#include "PrecompiledHeader.h"
#include "CCamera.h"
#include "CGame.h"

CCamera* CCamera::sm_pCameraInstance = NULL;

////////////////////////////////////////////////////////////////////////////////////
//	Function : CCamera (Constructor)
////////////////////////////////////////////////////////////////////////////////////
CCamera::CCamera(void)
{
	sm_pCameraInstance = NULL;

	ResetCam();
	
	m_fCameraScaleAmount = 1.0f;

	m_rCamera.bottom = 0;
	m_rCamera.left = 0;
	m_rCamera.right = 0;
	m_rCamera.top = 0;
}

////////////////////////////////////////////////////////////////////////////////////
//	Function : ~CCamera
////////////////////////////////////////////////////////////////////////////////////
CCamera::~CCamera(void)
{
}

////////////////////////////////////////////////////////////////////////////////////
//	Function : GetInstance
////////////////////////////////////////////////////////////////////////////////////
CCamera* CCamera::GetInstance(void)
{
	if(sm_pCameraInstance == NULL)
	{
		sm_pCameraInstance = new CCamera();
	}
	return sm_pCameraInstance;
}

////////////////////////////////////////////////////////////////////////////////////
//	Function : DeleteInstance
////////////////////////////////////////////////////////////////////////////////////
void CCamera::DeleteInstance(void)
{
	if(sm_pCameraInstance != NULL)
	{
		delete sm_pCameraInstance;
		sm_pCameraInstance = NULL;
	}
}

////////////////////////////////////////////////////////////////////////////////////
//	Function : ResetCam
////////////////////////////////////////////////////////////////////////////////////
void CCamera::ResetCam(void)
{
	m_rCamera.top = 0;
	m_rCamera.left = 0;
	m_rCamera.right = CGame::GetInstance()->GetScreenWidth();
	m_rCamera.bottom = CGame::GetInstance()->GetScreenHeight();
}

////////////////////////////////////////////////////////////////////////////////////
//	Function : UpdateCam
////////////////////////////////////////////////////////////////////////////////////
void CCamera::UpdateCam(int nCamOffSet, bool bForward)
{
	if(bForward)
	{
		m_rCamera.right = nCamOffSet + CAMOFFSET;
		m_rCamera.left = m_rCamera.right - CGame::GetInstance()->GetScreenWidth();
	}
	else if(!bForward)
	{
		m_rCamera.left = nCamOffSet - CAMOFFSET;
		m_rCamera.right = m_rCamera.left + CGame::GetInstance()->GetScreenWidth();
	}

}


////////////////////////////////////////////////////////////////////////////////////
//	Mutator : SetCamera
////////////////////////////////////////////////////////////////////////////////////
void CCamera::SetCamera(int nTop, int nLeft, int nRight, int nBottom)
{
	m_rCamera.top = nTop;
	m_rCamera.left = nLeft;
	m_rCamera.right = nRight;
	m_rCamera.bottom = nBottom;
}
////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////
//	Accessor : GetCameraRight
////////////////////////////////////////////////////////////////////////////////////
int CCamera::GetCameraRight(void)	{ return m_rCamera.right - CAMOFFSET; }
////////////////////////////////////////////////////////////////////////////////////
//	Accessor : GetCameraLeft
////////////////////////////////////////////////////////////////////////////////////
int CCamera::GetCameraLeft(void)	{ return m_rCamera.left + CAMOFFSET; }
////////////////////////////////////////////////////////////////////////////////////
//	Accessor : GetCameraRect
////////////////////////////////////////////////////////////////////////////////////
RECT CCamera::GetCameraRect(void) { return m_rCamera; }
////////////////////////////////////////////////////////////////////////////////////
//	Accessor : GetCameraScale
////////////////////////////////////////////////////////////////////////////////////
float CCamera::GetCameraScale(void)	{ return m_fCameraScaleAmount; }
////////////////////////////////////////////////////////////////////////////////////