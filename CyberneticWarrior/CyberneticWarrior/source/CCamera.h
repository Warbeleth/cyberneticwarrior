//////////////////////////////////////////////////////////////////////////////////////////////////////
//	File : CCamera.h
//
//	Author : Patrick Alvarez 
//
//	Purpose : Camera class declarations.
//////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CCAMERA_H_
#define CCAMERA_H_

#include "CGame.h"

#define CAMOFFSET 240

class CCamera
{
private:

	static CCamera* sm_pCameraInstance;

	float m_fCameraScaleAmount;

	RECT m_rCamera;
		
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : CCamera (Constructor)
	//
	//	Purpose : To initialize all of CCamera's data class members.
	////////////////////////////////////////////////////////////////////////////////////
	CCamera(void);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : ~CCamera (Destructor)
	//
	//	Purpose : To delete all of CCamera's allocated memory, 
	//			  NULLing out specific pointers and 
	//			  shutting down any necessary functionaly.
	////////////////////////////////////////////////////////////////////////////////////
	~CCamera(void);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : operator=
	//
	//	Purpose : CCamera's Assignment Operator overload function declaration.
	////////////////////////////////////////////////////////////////////////////////////
	CCamera& operator=(const CCamera&);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : CCamera
	//
	//	Purpose : CCamera's Copy Constructor function declaration.
	////////////////////////////////////////////////////////////////////////////////////
	CCamera(const CCamera&);

public:

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetInstance
	//
	//	Purpose : To instantiate CCamera's singleton if it still hasn't been created
	//			  and to return it to the invoking object.
	////////////////////////////////////////////////////////////////////////////////////
	static CCamera*	GetInstance(void);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : DeleteInstance
	//
	//	Purpose : To delete CGames Singleton Instance 
	//			  unless it already has been taken care of.
	////////////////////////////////////////////////////////////////////////////////////
	static void DeleteInstance(void);

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : UpdateCam
	//
	//	Purpose : To update the position of the games camera.
	////////////////////////////////////////////////////////////////////////////////////
	void UpdateCam(int nCamOffSet, bool bforward);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : ResetCam
	//
	//	Purpose : To reset the position of the games camera.
	////////////////////////////////////////////////////////////////////////////////////
	void ResetCam(void);

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : Mutators
	//
	//	Purpose : Mutates the specified type.
	////////////////////////////////////////////////////////////////////////////////////
	void SetCamera(int top, int left, int right, int bottom);
	////////////////////////////////////////////////////////////////////////////////////

	
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : Accessors
	//
	//	Purpose : Gain access the specified type.
	////////////////////////////////////////////////////////////////////////////////////
	RECT GetCameraRect(void);
	////////////////////////////////////////////////////////////////////////////////////
	float GetCameraScale(void);
	////////////////////////////////////////////////////////////////////////////////////
	int GetCameraRight(void);
	////////////////////////////////////////////////////////////////////////////////////
	int GetCameraLeft(void);
	////////////////////////////////////////////////////////////////////////////////////
};
#endif