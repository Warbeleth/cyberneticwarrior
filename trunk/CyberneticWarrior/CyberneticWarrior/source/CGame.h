//////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	File : CGame.h
//
//	Author : Patrick Alvarez 
//
//	Purpose : Main Game class declarations which
//			  will be used to continually handle and run the game build.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CGAME_H_
#define CGAME_H_

#include <d3d9.h>
class CBaseMessage;
class CMessageSystem;
class CSGD_Direct3D;
class CSGD_TextureManager;
class CSGD_WaveManager;
class CSGD_DirectSound;
class CSGD_DirectInput;
class CCodeProfiler;
class CCamera;
class CStackStateMachine;
class CEventSystem;

class CGame
{
private:
	
	CSGD_Direct3D*					m_pD3D;
	CSGD_TextureManager*			m_pTM;
	CSGD_WaveManager*				m_pWM;
	CSGD_DirectSound*				m_pDS;
	CSGD_DirectInput*				m_pDI;

	CStackStateMachine*				m_pSSM;

	CMessageSystem*					m_pMS;
	CEventSystem*					m_pES;

	CCodeProfiler*					m_pCP;

	int		m_nScreenWidth, m_nScreenHeight;

	float	m_fScaleX, m_fScaleY;

	unsigned char m_cPlayerOne[11];
	// 0 = jump
	// 1 = left
	// 2 = right
	// 3 = fire weapon
	// 4 = secondary fire
	// 5 = aim weapon
	// 6 = swap weapon
	// 7 = head slot ability
	// 8 = boot slot ability
	// 9 = climb rope
	// 10 = repel rope

	float	m_fElapsedTime;
	float	m_fGameTime;
	DWORD	m_dwTimeStamp;
	DWORD	m_dwPreviousTimeStamp;

	int m_nCodeProfilerID;


	////////////////////////////////////////////////////////////////////////////////////
	//	Function : CGame (Constructor)
	//
	//	Purpose : To initialize all of CGame's data class members.
	////////////////////////////////////////////////////////////////////////////////////
	CGame(void);
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : ~CGame (Destructor)
	//
	//	Purpose : To delete all of CGame's allocated memory, 
	//			  NULLing out specific pointers and 
	//			  shutting down any necessary functionaly.
	////////////////////////////////////////////////////////////////////////////////////
	~CGame(void);
	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : operator=
	//
	//	Purpose : CGame's Assignment Operator overload function declaration.
	//
	////////////////////////////////////////////////////////////////////////////////////
	CGame& operator=(const CGame&);
	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : CGame
	//
	//	Purpose : CGame's Copy Constructor function declaration.
	//
	////////////////////////////////////////////////////////////////////////////////////
	CGame(const CGame&);


	////////////////////////////////////
	// CGame Singleton Instance
	////////////////////////////////////
	static CGame*	sm_pGameInstance;
	////////////////////////////////////


	
	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : Input
	//
	//	Purpose : To read input devices for the SGD Wrappers along with
	//			  Handling the games main Input functionality.
	//
	////////////////////////////////////////////////////////////////////////////////////
	bool Input(void);

	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : Update
	//
	//	Purpose : To update main game loop along with any current 
	//			  game objects and states.
	//
	////////////////////////////////////////////////////////////////////////////////////
	void Update(float fElapsedTime);

	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : Draw
	//
	//	Purpose : To render objects to the screen and to call any 
	//			  other states or objects render functions.
	//
	////////////////////////////////////////////////////////////////////////////////////
	void Draw(void);

public:
	
	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : GetInstance
	//
	//	Purpose : To instantiate CGame's singleton if it still hasn't been created
	//			  and to return it to the invoking object.
	//
	////////////////////////////////////////////////////////////////////////////////////
	static CGame*	GetInstance(void);

	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : DeleteInstance
	//
	//	Purpose : To delete CGames Singleton Instance 
	//			  unless it already has been taken care of.
	//
	////////////////////////////////////////////////////////////////////////////////////
	static void		DeleteInstance(void);

	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : Initialize
	//
	//	Purpose : To Initialize every game build wrapper and singletons; 
	//			  along with setting up any other game requirements such as setting
	//			  the screen sizes and whether the game is windowed or fullscreen.
	//
	////////////////////////////////////////////////////////////////////////////////////
	void Initialize(HWND hWnd, HINSTANCE hInstance, int nScreenWidth, int nScreenHeight, bool bIsWindowed);

	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : Main
	//
	//	Purpose : CGame's Main Game Loop that is used to update the games fElapsed
	//			  time and call any necessary functions such as Update, Render and
	//			  Input.
	//
	////////////////////////////////////////////////////////////////////////////////////
	bool Main(void);

	////////////////////////////////////////////////////////////////////////////////////
	//
	//	Function : ShutDown
	//
	//	Purpose : To Shutdown every game engine, manager, wrapper 
	//			  and to NULL out any necessary pointers.
	//
	////////////////////////////////////////////////////////////////////////////////////
	void ShutDown(void);


	static void MessageProc(CBaseMessage*	pMsg);


	CMessageSystem*	GetMessageSystemPointer(void) const;

	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetScreenWidth
	//
	//	Purpose : Accessor that returns the main games Screen Width
	////////////////////////////////////////////////////////////////////////////////////
	int GetScreenWidth(void) const;
	////////////////////////////////////////////////////////////////////////////////////
	//	Function : GetScreenHeight
	//
	//	Purpose : Accessor that returns the main games Screen Height
	////////////////////////////////////////////////////////////////////////////////////
	int GetScreenHeight(void) const;

	int GetPlayerOneControls( int nControl ) { return m_cPlayerOne[nControl]; }
	void SetPlayerOneControls( int nControl, char cValue ) { m_cPlayerOne[nControl] = cValue; }
};
#endif