//////////////////////////////////////////////////////////////////////////////////////////////////////
// File: “CParticleManager.h”
//
// Author: Greg Stefanakis(GS)
//
// Purpose:	This will be the game's particle engine.  It will manage getting input from a binary file,
//			and controls all Emitters and Particles in the game.  Declared in order!
//////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CPARTICLEMANAGER_H_
#define _CPARTICLEMANAGER_H_

//Include Files
#include <vector>
using std::vector;
#include <string>
using std::string;
#include "SGD Wrappers/SGD_Math.h"
#include "SGD Wrappers/CSGD_TextureManager.h"
#include "SGD Wrappers/CSGD_Direct3D.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////
//						******************* CLASS - CParticle *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CParticle
{
private:
	//Alpha
	float m_fAlpha;
	float m_fAlphaModifier;
	//Scale
	float m_fScale;
	float m_fScaleModifier;
	//Rotation
	float m_fRotation;
	float m_fRotationModifier;
	//Lifetime
	float m_fLifetime;
	float m_fAge;

	//Position
	tVector2D m_tPos;
	tVector2D m_tOrigin;

	//Velocity
	tVector2D m_tVel;

	//Color
	DWORD m_dwColor;
	float m_fRedModifier;
	float m_fGreenModifier;
	float m_fBlueModifier;
	
	//Texture Dimensions
	float m_fWidth;
	float m_fHeight;

	//Wrapper Singletons
	CSGD_TextureManager* TM;
	CSGD_Direct3D* D3D;

public:
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CParticle”
	//
	// Purpose: Contstructor will default the initial values.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CParticle();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “~CParticle”
	//
	// Purpose: Destructor will take care of any shutdown functionality.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	~CParticle();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: This function will update the particles data based on the elapsed time.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fElapsedTime );

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: This function will render the particle to the screen.  Emitter will pass the int through
	//			the function call.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render(int nImageID);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “SetParticleInfo”
	//
	// Purpose: This function will act as a big modifier and set all the particle info
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetParticleInfo( float fAlpha, float fAlphaMod, float fScale, float fScaleMod, float fRotation, 
							float fRotationMod, float fLifetime, float fAge, float fPosX, float fPosY, 
							float fOriginX, float fOriginY, float fVelX, float fVelY, char cRed, 
							float fRedMod, char cGreen, float fGreenMod, char cBlue, float fBlueMod, 
							float fWidth, float fHeight);
};


//////////////////////////////////////////////////////////////////////////////////////////////////////
//						******************* CLASS - CEmitter *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CEmitter
{
private:

	//Vector of living particles
	vector<CParticle> m_vLivingParticles;

	//Vector of dead particles
	vector<CParticle> m_vDeadParticles;

	//Number of Particles
	int m_nNumParticles;

	//Emitter X and Y Coordinates
	tVector2D m_tEmitterPos;

	//Particle Texture ID
	int m_nParticleTextureID;

	//Emitter Lifetime
	float m_fEmitterLifetime;

	//Emitter Age
	float m_fEmitterAge;

	//Source Blend Mode
	int m_nSourceBlend;

	//Destination Blend Mode
	int m_nDestinationBlend;

	//Wrapper Singletons
	CSGD_TextureManager* TM;
	CSGD_Direct3D* D3D;

public:

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CEmitter”
	//
	// Purpose: The constructor will initialize default values.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CEmitter();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “~CEmitter”
	//
	// Purpose: The destructor will clear up any memory that was created in the class's lifetime.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	~CEmitter();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: This function will call update on all of it's particles.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fElapsedTime );

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: This function will call render on all of it's particles.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “SetEmitterValues”
	//
	// Purpose: This function will send all the information gathered from the binary load to the emitter.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetEmitterValues( string szParticleFilename, int nNumParticles, float fEmitterLifetime, int nSourceBlend, int nDestBlend);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: Accessors 
	// 
	// Purpose: Accesses the specified type. 
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	vector<CParticle> GetDeadParticleVector(){ return m_vDeadParticles; }
};

//////////////////////////////////////////////////////////////////////////////////////////////////////
//						******************* CLASS - CParticleManager *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CParticleManager
{
private:
	//Store all the emitters
	vector<CEmitter> m_vEmitters;

	// An instance to this class.
	static CParticleManager m_Instance;

	//Singleton:  Hide these functions
	CParticleManager();
	~CParticleManager();
	CParticleManager( CParticleManager &copy );
	CParticleManager &operator=( CParticleManager &assign );

public:

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “GetInstance”
	//
	// Purpose: This function will return the singleton instance of this class
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	static CParticleManager *GetInstance();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: This function will call update on all of it's emitters.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fElapsedTime );

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: This function will call render on all of it's emitters.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “LoadEffect”
	//
	// Purpose: This function will create a new emitter, load in binary information, and put all important
	//			values into the emitter and particles.  It will then return a boolean: true for successful load.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	bool LoadEffect( char* szEffectFileName );

};

#endif