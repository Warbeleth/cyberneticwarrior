//////////////////////////////////////////////////////////////////////////////////////////////////////
// File: “CParticleManager.h”
//
// Author: Greg Stefanakis(GS)
//
// Purpose:	This will be the game's particle engine.  It will manage getting input from a binary file,
//			and controls all Emitters and Particles in the game.
//////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CPARTICLEMANAGER_H_
#define _CPARTICLEMANAGER_H_

//Include Files
#include "SGD Wrappers//CSGD_Direct3D.h"
#include <vector>
using std::vector;
#include <string>
using std::string;
#include "SGD Wrappers/SGD_Math.h"



//////////////////////////////////////////////////////////////////////////////////////////////////////
//						******************* CLASS - CParticle *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CParticle
{
private:
	//Alpha
	float m_fAlpha;
	float m_fAlphaModifier;
	//Scale
	float m_fScale;
	float m_fScaleModifier;
	//Rotation
	float m_fRotation;
	float m_fRotationModifier;
	//Lifetime
	float m_fLifetime;
	float m_fAge;

	//Position
	tVector2D m_tPos;
	tVector2D m_tOrigin;

	//Velocity
	tVector2D m_tVel;

	//Color
	/*D3DXCOLOR m_tColor;
	D3DXCOLOR m_tColorModifier;
	*/
	//Texture Dimensions
	float m_fWidth;
	float m_fHeight;

public:
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CParticle”
	//
	// Purpose: Contstructor will default the initial values.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CParticle();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “~CParticle”
	//
	// Purpose: Destructor will take care of any shutdown functionality.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	~CParticle();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: This function will update the particles data based on the elapsed time.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fElapsedTime );

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: This function will render the particle to the screen.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();
};
//////////////////////////////////////////////////////////////////////////////////////////////////////
//						******************* CLASS - CEmitter *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CEmitter
{
private:

	//Vector of living particles
	vector<CParticle> m_vLivingParticles;

	//Vector of dead particles
	vector<CParticle> m_vDeadParticles;

	//Number of Particles
	int m_nNumParticles;

	//Emitter X and Y Coordinates
	tVector2D m_tEmitterPos;

	//Particle Texture ID
	int m_nParticleTextureID;

	//Emitter Lifetime
	float m_fEmitterLifetime;

	//Emitter Age
	float m_fEmitterAge;

	//Source Blend Mode
	int m_nSourceBlend;

	//Destination Blend Mode
	int m_nDestinationBlend;

public:

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CEmitter”
	//
	// Purpose: The constructor will initialize default values.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CEmitter();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “~CEmitter”
	//
	// Purpose: The destructor will clear up any memory that was created in the class's lifetime.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	~CEmitter();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: This function will call update on all of it's particles.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fElapsedTime );

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: This function will call render on all of it's particles.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();
};


//////////////////////////////////////////////////////////////////////////////////////////////////////
//						******************* CLASS - CParticleManager *******************
//////////////////////////////////////////////////////////////////////////////////////////////////////
class CParticleManager
{
private:
	//Store all the emitters
	vector<CEmitter> m_vEmitters;

public:

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “CParticleManager”
	//
	// Purpose: The constructor will initialize default values.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	CParticleManager();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “~CParticleManager”
	//
	// Purpose: The destructor will clear up any memory that was created in the class's lifetime.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	~CParticleManager();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Purpose: This function will call update on all of it's emitters.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fElapsedTime );

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “Render”
	//
	// Purpose: This function will call render on all of it's emitters.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “LoadEffect”
	//
	// Purpose: This function will create a new emitter, load in binary information, and put all important
	//			values into the emitter and particles.  It will return a boolean: true for successful load.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	bool LoadEffect( char* szEffectFileName );

};


#endif